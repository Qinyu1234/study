/*三要素:
    明文(数据/密文)    秘钥    算法*/

/*凯撒加密*/

/* 常用加密
    对称加密
        --加解密使用同一个秘钥
        --秘钥的绝对不能公开(秘钥分发困难)
        --特点
            +双向机密性保证
            +加密效率高
            +相对于非对称加密强度不高
    非对称加密
        --加解密使用同不同秘钥(秘钥分发容易)
        --秘钥的绝对不能公开(秘钥分发困难)
            -公钥:可以公开的秘钥
            -私钥:不可以公开的秘钥
            -公钥加密,私钥解密:(加密)
            -私钥加密:公钥验证(签名)
        --特点
            +单向机密性保证
            +加密效率低
            +相对于对称加密强度更高
*/
/* 对称加密的基本概念
    -DES/3DES/AES
    -解密 --> 编码(Encoding) --> 二进制
    -解密 --> 解码(Decoding) --> 明文
        --DES 企业不用了
            --不安全
            --如何加密
                +分组加密,按照64比特位(8字节)一组进行分组后再加密
            --密钥
                +64字节
        --3DES 3次des加密
            --加密过程  加密--解密--加密 -->密文
            --解密过程  解密--家密--解密 -->明文
            --加密小效率低
        --AES 
            --秘钥长度(标准中,长度只有128,192,256三种)
            --安全,进行10~14伦加密计算
            --分组加密,按照128比特位(128位,16字节)一组进行分组后再加密
            --AES秘钥长度
                128(16字节)
                192(24字节)
                256(32字节)
    */

    /*加密分组模式
        -ECB 电子密码本模式
            --最简单,企业不用
        -CBC 密码块链模式
        -CFB 密文反馈模式(了解)
        -OFB 输出反馈模式(了解)
        -CTR 计数器模式
    */

    /*单向散列函数
        --常见的
            --MD4(不用)/MD5(加盐使用)    不安全
                --传统用法
                    +数据:123456
                    +算法:MD5
                    +直接算出散列值
                    +不安全,会被暴力破解
                --现在用法
                    +数据:123456
                    +算法:MD5
                    +加盐操作:aaa123ccc456bb
                    +利用MD算出散列值
                    +会破解,但只能得到加盐后的数据
            --Sha1
            --Sha2
        --特点
            --任意长度的数据转换出固定长度的散列值
            --数据不同单烈值也不同
                --123456789 --> MD5 --> asdbc
                --923456781 --> MD5 --> ersdf
            --抗碰撞性强不可逆
        --应用场景
            --秒传
                --服务器计算每个文件散列值,存储文件时把散列值也存储起来
                --用户上传文件时,计算上传文件散列值,然后在服务器查找有没有相同散列值
                --如果有,说明文件被其他人传过了,立即上传成功
                --没有,就慢慢传
            --数据验证,没有没有被篡改过
        同样的数据利用相同的单向散列函数计算出来的结果是一样的
            --123456789 --> MD5 --> asdbc
            --123456789 --> MD5 --> asdbc
    */

    /* https
    http:默认不加密的传输,超文本传输协议
    https: 默认加密的传输,超文本安全传输协议
    https = http +SSL/TLS

    --SSL
        +Secure Socket Layer，为Netscape所研发，用以保障在Internet上数据传输的安全，利用数据加密(Encryption)技术，可确保数据在网络上的传输过程中不会被截取及窃听
        -http    
            +应用层(http) --> TCP --> IP
        -https
            +应用层(http) --> SSL --> TCP --> IP
    --ssl是tls前身
        -3.0版本前叫ssl
        -3.0版本后叫tls
    
    --传输数据流程
        -http
            --浏览器 call 服务器:OK?
            --服务器 call 浏览器:OK!你OK?
            --浏览器 call 服务器:OK!
        -https
           --浏览器 call 服务器:请求 
           --服务器 call 浏览器:返回证书 
           --浏览器 验证证书,发服务器密钥(浏览器随机生成)
           --利用证书中的公钥对秘钥进行加密传给服务器
           --服务器利用私钥解密出密钥
        --区别
            +https更复杂,
            +传输效率低于http
            +安全性强于http
    */